name: fslock CI - Check
on:
  pull_request:


jobs:
  check:
    strategy:
      matrix:
        os:
          - code: ubuntu-latest
            name: Linux
          - code: windows-latest
            name: Windows
          - code: macos-latest
            name: MacOS
    name: Check ${{ matrix.os.name }}
    runs-on: ${{ matrix.os.code }}
    env:
      RUST_BACKTRACE: 1

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Get Rust toolchain version
        id: get-version
        shell: bash
        run: |
          version=$(cat rust-toolchain.toml | sed -n 's/channel = "\(.*\)"/\1/p')
          echo "v=$version" >> "$GITHUB_OUTPUT"
          echo "Using Rust version $version"

      - name: Install stable toolchain
        shell: bash
        run: |
          rustup update ${{ steps.get-version.outputs.v }} \
            && rustup default ${{ steps.get-version.outputs.v }}

      - name: Run cargo clippy
        shell: bash
        run: cargo clippy -- -Dwarnings

      - name: Run cargo clippy without default features
        shell: bash
        run: cargo clippy --no-default-features -- -Dwarnings

      - name: Run cargo fmt check
        shell: bash
        run: cargo fmt --check


  test:
    strategy:
      matrix:
        os:
          - code: ubuntu-latest
            name: Linux
          - code: windows-latest
            name: Windows
          - code: macos-latest
            name: MacOS
    name: Test Suite on ${{ matrix.os.name }}
    runs-on: ${{ matrix.os.code }}
    env:
      RUST_BACKTRACE: 1

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Get Rust toolchain version
        id: get-version
        shell: bash
        run: |
          version=$(cat rust-toolchain.toml | sed -n 's/channel = "\(.*\)"/\1/p')
          echo "v=$version" >> "$GITHUB_OUTPUT"
          echo "Using Rust version $version"

      - name: Install stable toolchain
        shell: bash
        run: |
          rustup update ${{ steps.get-version.outputs.v }} \
            && rustup default ${{ steps.get-version.outputs.v }}

      - name: Run cargo test
        shell: bash
        run: cargo test

      - name: Run cargo test without default features
        shell: bash
        run: cargo test --no-default-features
